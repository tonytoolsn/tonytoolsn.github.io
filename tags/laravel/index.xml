<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>LARAVEL on Tony&#39;s Blog</title>
    <link>https://tonytoolsn.github.io/tags/laravel/</link>
    <description>Recent content in LARAVEL on Tony&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language>
    <lastBuildDate>Wed, 18 Nov 2020 08:00:00 +0800</lastBuildDate><atom:link href="https://tonytoolsn.github.io/tags/laravel/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Git版本控管</title>
      <link>https://tonytoolsn.github.io/blog/laravel_git/</link>
      <pubDate>Wed, 18 Nov 2020 08:00:00 +0800</pubDate>
      
      <guid>https://tonytoolsn.github.io/blog/laravel_git/</guid>
      <description>Git版本控管實務  分散式管理系統  Git為分散式版本控管系統，可把檔案狀態作為更新歷史紀錄加以保存，方便還原與追蹤 為了解決協作時對於同一檔案的修改導致互相覆蓋，又無法紀錄修改等問題 版本庫是記錄檔案或目錄狀態的地方，儲存內容的修改歷史記錄，分為本地端與遠端。 本地端與遠端版本庫功能相同，差別在於遠端版本庫作為協作公開使用   三層式目錄結構  工作目錄(working directory)： 專案被取出的某一個版本。這些檔案從 Git 目錄內被壓縮過的資料庫中拉出來並放在保存目前專案的目錄供使用或修改 暫存區域(staging area)： 位於工作目錄與版本庫之間，為了向版本庫提交前的暫存區域。所有提交不會直接進版本庫，而是先進到暫存區作索引，之後才提交 Git 目錄(repository)： Git 用來儲存專案的 metadata 及物件資料庫。這是 Git 最重要的部份，當從其它版本庫複製時會備份過來   名詞說明 Comment   Commit 提交修改到本地版本庫</description>
    </item>
    
    <item>
      <title>Laravel-Controller 控制器</title>
      <link>https://tonytoolsn.github.io/blog/laravel_controller/</link>
      <pubDate>Mon, 16 Nov 2020 08:00:00 +0800</pubDate>
      
      <guid>https://tonytoolsn.github.io/blog/laravel_controller/</guid>
      <description>控制器Controller 關於Controllers
都存放於app\Http\Controllers
可建⽴⼦資料夾
⽤於協同管理Model.View
建⽴Controller的指令
php artisan make:controller Controller名稱 複習關於routes/web.</description>
    </item>
    
    <item>
      <title>Laravel-視圖View&amp;Blade</title>
      <link>https://tonytoolsn.github.io/blog/laravel_view_blade/</link>
      <pubDate>Sun, 15 Nov 2020 23:40:00 +0800</pubDate>
      
      <guid>https://tonytoolsn.github.io/blog/laravel_view_blade/</guid>
      <description>View與視圖  將PHP轉成HTML檔之後傳出  舊有的PHP檔案  沒有Controller Model負責資料查詢 View負責處理HTML  Laravel的View設計  負責儲存HTML，並將要顯⽰動態資料的地⽅留出來，等傳⼊後替換  Blade樣板引擎  檔名需為*.</description>
    </item>
    
    <item>
      <title>Laravel-Route 路由</title>
      <link>https://tonytoolsn.github.io/blog/laravel_routing/</link>
      <pubDate>Sun, 15 Nov 2020 23:30:00 +0800</pubDate>
      
      <guid>https://tonytoolsn.github.io/blog/laravel_routing/</guid>
      <description>Route 路由 路由負責管理網站所有的請求行為，根據訪問的網址以及請求動詞(GET.POST)來決定交由哪一個控制器的方法來處理
 Laravel 5.3以前的版本
只有⼀個路由檔案，位於app/Http/routes.php
網⾴請求.API路由都寫在這裡
 負責的檔案 一般使用者透過瀏覽器所進行的請求都會交由routes/web.</description>
    </item>
    
    <item>
      <title>Laravel-MVC設計架構</title>
      <link>https://tonytoolsn.github.io/blog/laravel_mvc/</link>
      <pubDate>Sun, 15 Nov 2020 23:20:00 +0800</pubDate>
      
      <guid>https://tonytoolsn.github.io/blog/laravel_mvc/</guid>
      <description>什麼是MVC設計架構? 在1974年提出，概念是將應⽤程式拆解成不同的功能區塊，各⾃處理負責事項
 四人幫(Gang of Four)並沒有把MVC作為一種設計模式︐而是把它當作”一組用 於建構使用者介面的類集合”︐因為它其實是由三個經典的設計模式組合而成︐ 分別為觀察者模式(Observer) . 策略模式(Strategy)和組合模式(Composite) 實作上把系統分成三個區塊︐分別為︓Model .</description>
    </item>
    
    <item>
      <title>Laravel開發環境建置</title>
      <link>https://tonytoolsn.github.io/blog/software_laravel/</link>
      <pubDate>Sun, 15 Nov 2020 08:15:00 +0800</pubDate>
      
      <guid>https://tonytoolsn.github.io/blog/software_laravel/</guid>
      <description>Windows作業系統 1.安裝XAMPP
2.安裝Visual Studio Code
3.安裝Composer
4.下載Laravel安裝器
5.建立Laravel專案
6.確認建置是否成功</description>
    </item>
    
  </channel>
</rss>
