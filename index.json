[{"categories":["LARAVEL"],"contents":"View與視圖  將PHP轉成HTML檔之後傳出  舊有的PHP檔案  沒有Controller Model負責資料查詢 View負責處理HTML  Laravel的View設計  負責儲存HTML，並將要顯⽰動態資料的地⽅留出來，等傳⼊後替換  Blade樣板引擎  檔名需為*.blade.php 編譯成一般PHP 啟用快取以加快回應速度  為何有樣板的需求?  每個⾴⾯都會有共同的內容，⽐如選單 舊有PHP的應對作法 透過include語法，可以將其他⾴⾯檔案嵌⼊到當前畫⾯內  那繼續使⽤include不好嗎??  單純複製貼上，並無容器的概念 無法將動態資料傳遞進去，只能顯⽰ 固定內容  Laravel樣板引擎   可傳遞參數\n⽅便傳遞參數並執⾏所有PHP內建函式與Laravel語法\n  ⾴⾯加入親屬關係\n繼承變得簡單，重複的部分都移到⽗視圖去，不同的部分才留在⼦視圖\n  Blade導⼊\n採⽤Blade作為引擎\n  Laravel的View設計  採⽤MVC架構來進⾏設計，View檔案都放在resources/views資料夾內 所有View的檔案以*.blade.php作為結尾，內容就是⼀般的HTML程式碼加上Blade語法  回傳View結果  ⽤view()這個helper function直接回傳，特別路徑要正確，路徑⽤『 . 』來區隔，不需寫.blade.php  class UserController extends Controller{\rpublic function index(){\r//檔案為resources/views/users的index.blade.php\rreturn view(‘users.index’);\r}\r}\rBlade語法\nBlade指令1\n @ 開頭 • 樣板控制@yield . @extends • 程式邏輯控制@if . @foreach { 開頭 • 輸出內容{{ . {!! • 註解 {{- -\n Blade指令2\n 挖洞 @yield(‘{section name}’)\n繼承 @extends(‘{view name}’)\n包含 @include(‘{view name}’)\n填洞 • @section(‘{yield name}’ , ’{ string }’) • @section(‘{yield name}’) • @stop\n ⽗Blade版⾯配置 \u0026lt;head\u0026gt;\r\u0026lt;title\u0026gt;My Site | @yield(‘title’,’HomePage’)\u0026lt;/title\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r@yield(‘content’)\r@include(‘include’,[‘text’=\u0026gt;’master page’])\r@section(‘footerScripts’)\r\u0026lt;script src=“app.js”\u0026gt;\u0026lt;/script\u0026gt;\r@show\r⼦Blade版⾯配置 @extends(‘layouts.master’) 繼承\r@section(‘title’,’About’) 取代，第⼆參數為預設\r@section(‘content’) 充填\r@endsection\r\u0026lt;div\u0026gt;…\u0026lt;/div\u0026gt;\r@section(‘footerscripts’)\r@endsection\r@parent 繼承⽗Blade再充填\r\u0026lt;script src=“dashboard.js”\u0026gt;\u0026lt;/script\u0026gt;\r 控制結構\n• @if . @elseif . @else . @endif（假如） • @unless . @endunless (除⾮) • @switch(當)\n邏輯控制\n迴圈 •@for( $i = 0 ; $i\u0026lt;10 ; $++ ) @endfor •@foreach( $tasks as $task ) @endforeach •@forelse @empty @endforelse •@while(條件) @endwhile\n foreach/forelse的$loop 是⼀個stdClass物件，具有以下特性\n   index 項⽬索引，從0開始 last 判斷是否為最後⼀個項⽬     iteration 項⽬索引，從1開始 first 判斷是否為第⼀個項⽬   remaining 還剩多少個項⽬ depth 迴圈有幾層深   count 項⽬數量 parent 參考上層迴圈的$loop    輸出資料  {{ $string }} • 輸出前會做跳脫，安全預設 • {{ $name ?? ‘Default’ }}\n{!! $html !!} 輸出不會做跳脫，可⽤於輸出 HTML或JS\n想要顯⽰{{ ⽤@{{ raw data}}輸出\n不確定是否有值，需要給預設值 ⽤{{ $title ?? ‘Default’ }}\n 傳送值到多個View 全域共⽤變數\n//app/Providers/AppServiceProvider.php\n• 讓你應用程式內的每一個視圖全域共用一個變數 • 使用view物件的share()函式 • 需要寫在Provider的boot()方法 • 可使用預設的AppServiceProvider • 8.x版本不需要再加上defaultStringLength(191);\n多視圖共⽤變數\n//app/Providers/AppServiceProvider.php\n• 讓多個視圖共⽤變數 • 使⽤view物件的composer()函式 • 可寫在Provider的boot()⽅法 • 可使⽤預設的AppServiceProvider\n View\u0026amp;Blade練習作業 • ☐嘗試⾃⼰做出電⼦商務⾸⾴的blade視圖，並從Controller回傳 • ☐優化⾃⼰的blade，把重複部分分離成master.blade.php，以繼承的⽅式改寫 • ☐練習課程所有提到的Blade指令 • ☐實驗{{ }} 和{!! !!}}這兩種輸出指令的不同 • ☐嘗試兩種將值傳到多個View的作法，並思考其使⽤時機\n ","permalink":"https://tonytoolsn.github.io/blog/laravel_view_blade/","tags":["LARAVEL"],"title":"Laravel-視圖View\u0026Blade"},{"categories":["LARAVEL"],"contents":"Route 路由 路由負責管理網站所有的請求行為，根據訪問的網址以及請求動詞(GET.POST)來決定交由哪一個控制器的方法來處理\n Laravel 5.3以前的版本\n只有⼀個路由檔案，位於app/Http/routes.php\n網⾴請求.API路由都寫在這裡\n 負責的檔案 一般使用者透過瀏覽器所進行的請求都會交由routes/web.php來設定 而API相關的請求則是交由routes/api.php來設定\n編寫路由規則 Route::get('路徑','App\\Http\\Controllers\\HomeController@index');\rget 請求動詞\n路徑 網址路徑\n控制器 負責處理此請求的控制器，8.x之後需要加上命名空間\n方法 負責處理此請求的方法\n規則判定由上至下逐一比對，只要符合路徑就傳遞給控制器\n8.X之後支援的新寫法\nuse App\\Http\\Controllers\\HomeController;\rRoute::get(‘路徑’,[HomeController::class,‘index’]);\r Route動詞 設定此規則所⽀援的請求⽅式\n   重要 較不重要     GET.POST PUT.PATCH.DELETE.OPTIONS. ANY.MATCH     聊聊Closure PHP的匿名函式\n//匿名函式可當成物件.指派給變數當成參數傳遞\rRoute::match(['get', 'post'], '/', function () {\rreturn 'Hello World';\r});\r 直接在路由檔裡面耍流氓 你可以不經由控制器裡的方法來處理請求，直接在路由檔內搞定，但不建議這樣做\n//routes/web.php\rRoute::get('路徑',function(){\rreturn 'Hello!';\r});\r 關於Controllers控制器 位於app/Http/Controllers資料夾，可建立子資料夾\n⽤於管理Model.View\n建立檔案的指令\n//app/Http/Controllers\rphp artisan make:controller HomeController\r//建立⼀個不帶⽅法的Controller php artisan make:controller Controller名稱\r//建立⼀個帶CRUD⽅法的Controller\rphp artisan make:controller Controller名稱- -resource\r  你不應該回傳Echo\n內容不會直接回傳給前端，還是會經過回應堆疊和中介層等等\n  路由可傳遞參數 //routes/web.php\rRoute::get('路徑/{id}',function($id){\rreturn 'Hello ' . $id;\r});\r可傳遞多個參數 //routes/web.php\rRoute::get('路徑/{id}/{name}',function($id,$name){\rreturn 'Hello ' . $id . ',Name is ' . $name;\r});\rRoute::get('posts/{post}/comments/{comment}', function ($post,\r$comment) {\r//路徑分類⼀般都會有多個⽅法，都會加s，表⽰複數形\r});\r可傳可不傳遞參數 //routes/web.php\r//=代表預設值\rRoute::get('路徑/{id?}',function($id = 1){\rreturn 'Hello ' . $id;\r});\r 設定路由群組\n//prefix路徑前置詞，將所包含的路由規則路徑加⼊前置詞\rRoute::group(['prefix' =\u0026gt; 'demo'],function(){\rRoute::get('hello', function () {\rreturn 'Hello' ;\r});\rRoute::get('world', function () {\rreturn 'World';\r});\r});\r//namespace命名空間，將所包含的路由規則控制器類別加⼊命名空間\rRoute::namespace(‘App\\Http\\Controllers\\Admin’)-\u0026gt;group(function () {\r// 裡頭的控制器都包含在 以下命名空間”\rApp\\Http\\Controllers\\Admin\u0026quot;\r});\r設定路由名稱\n//routes/web.php\rRoute::get('demo/{id}','App\\Http\\Controllers\\HomeController@index')-\u0026gt;name('home.index');\r//resources/views/show.blade.php\r\u0026lt;a href=\u0026quot;{{ route(‘home.index’, [‘id’=\u0026gt;1]) }}\u0026quot;\u0026gt;總覽頁\u0026lt;/a\u0026gt;\r Route Model Binding 只要在參數前宣告模型類別，⾃動為你⽤id進資料庫查詢該表，直接提供model物件給你\nRoute::get('api/users/{user}', function (App\\User $user) {\rreturn $user-\u0026gt;email;\r});\r 進行轉址 外部轉址 //routes/web.php\rRoute::get(‘baha’,function(){\rreturn redirect(‘[https://goblinlab.org](https://goblinlab.org/)’);\r});\r內部轉址 //routes/web.php\rRoute::get(‘redirect’,function(){\rreturn redirect(url(‘hello’));\r});\r 設定路由名稱 以後設定URL可以搭配route()直接使⽤Name\n//routes/web.php\rRoute::get(‘users/{id}’,’App\\Http\\Controllers\\UsersController@index')\r-\u0026gt;name(‘users.index’);\r//resources/views/users.blade.php\r\u0026lt;a href=“{{ route(‘users.index’, [‘id’=\u0026gt;1]) }} ”\u0026gt;\r 建立負責執⾏轉址的路由規則 直接建⽴⽤以轉址的路由規則\n//路徑 網址 狀態碼\rRoute::redirect(‘here’ , ’http://goblinlab.org’ , 301);\r redirect()的withInput() ⽤於當⽤⼾輸⼊錯誤需要轉回表單⾴，並保存輸⼊內容\nRoute::post('form',function(){\rreturn redirect('form')-\u0026gt;withInput()\r-\u0026gt;with(['error' =\u0026gt; true , 'message' =\u0026gt; ‘Bad!’]);\r});\r old() ⽤於轉回⾴⾯要取得保留的輸⼊內容\n\u0026lt;input name=“username” value=“\u0026lt;?=\rold('username','default value') ?\u0026gt;”\u0026gt;\r 相關名詞說明 SPA Single Page Application 將網頁做成類似一般App應用樣貌的一頁式操作\nClosure 沒有名稱的匿名函式，一般用於封包程式碼且只用一次\nFacade Laravel所提供的工具類別，包含大量好用的類別函式\nMiddleware 中介層，符合條件的請求在處理前會先執行的內容\n  我該先掌握哪些Route技巧? • 會撰寫基本路由語法 • ⾄少會GET.POST兩種動詞 • 會⽤路由傳遞參數 • 懂得怎麼轉址\n 參考資料\nLaravel 學習筆記\n使用 Route\n","permalink":"https://tonytoolsn.github.io/blog/laravel_routing/","tags":["LARAVEL"],"title":"Laravel-Route 路由"},{"categories":["LARAVEL"],"contents":"什麼是MVC設計架構? 在1974年提出，概念是將應⽤程式拆解成不同的功能區塊，各⾃處理負責事項\n 四人幫(Gang of Four)並沒有把MVC作為一種設計模式︐而是把它當作”一組用 於建構使用者介面的類集合”︐因為它其實是由三個經典的設計模式組合而成︐ 分別為觀察者模式(Observer) . 策略模式(Strategy)和組合模式(Composite) 實作上把系統分成三個區塊︐分別為︓Model . View . Controller   MVC網⾴應⽤流程 Controller控制器 事件層  整個運作過程中的核⼼，掌握與瀏覽器之間的互動⾏為，也負責收 發 Request 與 Response，因此，通常會在 Controller 設置不同 的事件 Event，進⽽觸發不同指令完成後續動作。 例如：當 Controller 收到請求後，Controller 會通知 Model 調度 資料，接著再把資料傳遞給 View 來產⽣樣板，最終將呈現資料的 HTML ⾴⾯回傳到客⼾端的瀏覽器。   Model模型 邏輯層  資料管理與商業邏輯有關的事項，都交由Model來處理。 對資料進⾏「新增、修改、刪除、瀏覽」的動作，屬於資料管理。 電商網站的199免運費、計算訂單總額…等等，屬於商業邏輯。   View視圖 表現層  主要管理與使⽤者互動的介⾯，以Web應⽤來說就是HTML樣板， 若為動態網站，它會依據所傳⼊的資料，呈現出使⽤者所需要的獨 特內容 。   MVC設計架構為何變成主流?  軟體中最常變化的部份，往往是使⽤者操作介⾯ ，使⽤MVC的設計模式，可有效降低使⽤者操作介⾯上的變化對其他部份所造成的衝擊。 因此各種主流的軟體開發語⾔、⼯具及平臺，都以MVC做為畫分使⽤者操作介⾯及其他組成的架構。 不論是桌機的使⽤者操作介⾯應⽤程式框架，或是Web-based的網站應⽤程式框架，幾乎都是基於MVC概念的產物。   優點  各組成相互獨⽴ ，單⼀組成具有⾼聚合⼒ ， ⽽不同的組成間耦合⼒低。 組成內的變化，波及到其他組成的機會相對低，可提⾼重⽤性。 各組成基於分責原則，可各⾃隸屬於不同專業。 容易維護與擴展。   缺點  實作⿇煩，較不適合中⼩等規模。 增加系統結構的複雜性，運⾏效率降低容易維護與擴展。   Laravel的解決策略  設計出⼀個清楚的資料夾結構，不需使⽤者⾃⼰建立，專案會⾃動⽣成。 利⽤快取與預編譯等機制來提升效率。   MVC設計架構實作策略  把系統拆解成Model . View . Controller三個區塊︐就能交由不同專業的人來合作開發︐可降低彼此工作的影響︐並提供程式碼的重用性。 Laravel已經幫你規劃好了︐你只要照著用即可實作出來。   參考資料\nLaravel 的 MVC 模型\n","permalink":"https://tonytoolsn.github.io/blog/laravel_mvc/","tags":["LARAVEL"],"title":"Laravel-MVC設計架構"},{"categories":["LIFESTYLE"],"contents":"撰寫部落格流程 選擇題材 -\u0026gt; 蒐集資料 -\u0026gt; 段落大綱 -\u0026gt; 文章段落 -\u0026gt; 檢查編輯 -\u0026gt;分享出去\n選擇題材  從自己學程式的過程出發找靈感 介紹自己的作品 分享自己喜歡的的連結和學習資源，觀念筆記 閱讀心得、參加活動和演講的心得 實作教學 在學習過程中記下自己容易混淆的觀念。以解釋觀念為主，程式碼為舉例和輔助說明，實作的部分較少。 部落格的題材除了從自己學程式的過程出發，也可以瀏覽 Quora、Stack Overflow 等問答區，從他人的提問中找靈感。  蒐集資料 、腦力激盪  這個階段，你蒐集資料的目的只是「腦力激盪」、並幫助你列出文章大綱，而不是要寫出完整的文章。因此，一開始不要找一大堆資料、開一堆視窗，讓自己的思緒混亂又挫折，反而迷失方向。  列出段落大綱  寫段落大綱不難，只需要把剛剛找資料時紀錄的重點，以自己的邏輯排序，並刪除不必要的部分。一開始的段落大綱不用很詳細，只需用簡短的句子和關鍵字，幫助自己整理這篇文章的架構。 每個大段落中再用簡單的關鍵字，紀錄該段落會包含的內容。 擬定了文章的大概架構後，接下來開始做更細部的規劃。 規劃段落大綱要到多詳細？這沒有一定的答案，以自己方便為主。但可以肯定的是，規劃得越清楚，之後寫文章一定會越輕鬆。段落大綱就是給自己的備忘錄，規劃大綱的過程中可以同時搜尋資料，把外部資料連結放在某段落的下面，讓自己寫到那個段落時不用再重新查一遍，節省時間。  撰寫文章段落  擬定大綱後，接下來開始撰寫文章段落。大原則是：最有把握的內容先寫、文章開頭與結尾可以最後寫。 寫技術部落格時，寫到一半會卡住通常就兩個原因：一、觀念不清楚；二、不知道要寫什麼。如果觀念不清楚，就針對自己混淆的地方，閱讀更多資料找出答案。如果不知道要寫什麼，就回過頭將段落大綱規劃得更詳細，重新調整文章邏輯。 對於教學文或技術分享而言，建議一篇文章的開頭就要寫明這篇文章的「目的和主旨」，讓讀者一開始就知道讀這篇文章可以得到什麼收穫。文章的結尾，可以簡單總結本篇文章的重點，幫助讀者再次複習，並邀請讀者留言提問和指教。  檢查、編輯  寫完文章一定要仔細檢查，檢查錯字、贅字、專有名詞大小寫，並把句子修得更通順。  分享出去  發佈之後，除了在自己的臉書分享，也可以分享在和文章主題相關的開發者社群中（例如：想讓更多人點閱你的文章，除了把連結分享在社群網站上，也別忘了加上一小段文案，介紹這篇文章的重點，吸引對這個主題有興趣的讀者，並且有禮貌地懇請大家提供回饋。)  //個人文章規劃\r主標題 \u0026lt;h2\u0026gt;\r目錄 引用\r1 \u0026lt;h4\u0026gt;\r1.1 \u0026lt;h6\u0026gt;\r. \u0026lt;h6\u0026gt;\ra. \u0026lt;h6\u0026gt;\r結論: \u0026lt;h4\u0026gt;\r參考資料: \u0026lt;h4\u0026gt;\r線上資源: \u0026lt;h4\u0026gt;\r.描述 粗體\r.語法 粗體\r.規則 粗體\r.注意 粗體\r.例子 粗體\r.補充說明 引用\r.分類 表格\r.結語 斜體\r維基百科wiki \u0026lt;h4\u0026gt;\r線上文獻 \u0026lt;h4\u0026gt;\r參考資料: 技術寫作六步驟 讓工程師撰寫流暢的技術部落格\n","permalink":"https://tonytoolsn.github.io/blog/lifestyle_article/","tags":["LIFESTYLE"],"title":"個人文章撰寫流程紀錄"},{"categories":["LARAVEL"],"contents":" Windows作業系統 1.安裝XAMPP\n2.安裝Visual Studio Code\n3.安裝Composer\n4.下載Laravel安裝器\n5.建立Laravel專案\n6.確認建置是否成功\n7.設定本地化網域(非必須)\n8.專案設定\n9.錯誤排除\n Laravel開發環境建置 Windows作業系統 1.安裝XAMPP  PHP + Apache + MariaDB懶人包  下載點\n請下載PHP 7.2.5以上版本，下載完後安裝，過程只需不斷按Next即可。\n 2.安裝Visual Studio Code  由微軟提供，可免費使用的IDE  下載點\n 3.安裝Composer  用於管理所有PHP套件，包含Laravel， Composer-Setup.exe。  下載點\nPS:如之前已安裝過，需升級成新版本，可使用以下指令\ncomposer self-update\r 4.下載Laravel安裝器  開啟cmd，輸入以下指令  composer global require laravel/installer\r 5.建立Laravel專案  開啟cmd，切換到xampp的htdocs資料夾，輸入指令，路徑應根據您的狀況作調整  cd c:\\xampp\\htdocs\r 如果要建立的是最新Laravel版本的專案，請輸入指令  //c:\\xampp\\htdocs\r//app_name 專案名稱\rlaravel new app_name\r 如果要建立指定Laravel版本的新專案，例如5.8，需使用composer，請輸入指令  //c:\\xampp\\htdocs\rcomposer create-project --prefer-dist laravel/laravel app_name \u0026quot;5.8.*\u0026quot;\r 生成應用金鑰，開啟Terminal，切換到新建立的專案資料夾，請輸入指令  //c:\\xampp\\htdocs\\app_name\rphp artisan key:generate\r開啟專案，確定是否有.env檔案，如果找不到.env檔，可將.env.example檔案改名成.env\n 6.確認建置是否成功 請確保Apache服務和MySQL服務都有開啟\n開啟瀏覽器，輸入網址 http://localhost/app_name/public\n 7.設定本地化網域(非必須)  將所命名的網域指向到本機 127.0.0.1，作法是修改hosts，這裡以laravel.test為例  //C:\\WINDOWS\\system32\\drivers\\etc\\hosts\r127.0.0.1 laravel.test #Laravel學習專案\r//輸入網址 http://laravel.test/app_name/public\r 告訴此網域需要由哪個專案資料夾來接手，作法是修改httpd-vhost.conf，路徑應根據您的狀況作調整  //XAMPP資料夾\\apache\\conf\\extra\\httpd-vhosts.conf\r\u0026lt;VirtualHost *:80\u0026gt;\rDocumentRoot \u0026quot;c:\\xampp\\htdocs\\app_name\\public\u0026quot; ServerName laravel.test \u0026lt;Directory \u0026quot;c:\\xampp\\htdocs\\app_name\\public\u0026quot;\u0026gt;\rOptions FollowSymLinks\rAllowOverride None\rOrder allow,deny\rAllow from all\r\u0026lt;/Directory\u0026gt;\r\u0026lt;/VirtualHost\u0026gt;\r  要求Apache開啟時需讀取httpd-vhosts.conf，作法是修改 XAMPP資料夾\\apache\\conf\\original\\httpd.conf。找到httpd-vhosts.conf那一行，把前面的#註解移除。\n  重開Apache服務，訪問http://laravel.test，看能否順利開啟\n   8.專案設定  主設定檔修改 - 修改config/app.php，設定timezone時區與locale語系  //config/app.php\r'locale' =\u0026gt; 'zh_TW',\r'timezone' =\u0026gt; 'Asia/Taipei',\r 隱私設定檔設定 - 修改.env檔案，所設的值不可以有空格  //.env\rAPP_NAME=Blog //專案名稱\rAPP_ENV=local //專案所在環境，local為本地端開發，production為正式上線環境\rAPP_KEY //應用金鑰，不得為空，可透過 php artisan key:generate來生成\rAPP_DEBUG=true //是否開啟除錯模式，正式上線環境建議關掉\rAPP_URL=http://localhost/blog/public //專案網域，須設定到public資料夾\rDB_CONNECTION=mysql //所要連接的資料庫\rDB_HOST=127.0.0.1 //資料庫Ip Address\rDB_PORT=3306 //資料庫port號\rDB_DATABASE=blog //資料庫名稱\rDB_USERNAME=root //資料庫帳號\rDB_PASSWORD= //資料庫密碼\r 9.錯誤排除   套件安裝錯誤 - 出現記憶體不足的錯誤導致安裝失敗\n解決方案:\n找到Apache資料夾內的php.ini(Windows版本在php資料夾內)，找到裏頭的一行設定\u0026quot;memory_limit\u0026quot;，將其值改成-1，即可不限定伺服器的記憶體空間\n  套件安裝太慢 Comment\n解決方案:\n可能是Composer內核還是1.x版本，請升級到2.0.6以上，請開啟CMD輸入以下指令\n  composer self-update --2\r  資料庫連線錯誤 - 出現1071 Specified key was too long; max key length is 767 bytes\n解決方法：\n開啟 app\\Providers\\AppServiceProvider.php\n加入以下程式碼：\n  use Illuminate\\Support\\Facades\\Schema;\rpublic function boot()\r{\rSchema::defaultStringLength(191);\r}\r  權限不足錯誤 - Mac開發環境出現storage資料夾的 failed to open stream:Permission denied\n解決方法:\n開啟Terminal，切換到專案資料夾後，輸入以下指令\n  sudo chmod -R 777 storage\r  應用錯誤 - 出現No application encryption key has been specified - 錯誤原因是缺少應用的金鑰\n解決方案:\n開啟Terminal，切換到專案資料夾後，輸入以下指令\n  php artisan key:generate\r參考資料\nxampp安裝\nvscode安裝\ncomposer安裝\nlaravel安裝\n","permalink":"https://tonytoolsn.github.io/blog/software_laravel/","tags":["LARAVEL"],"title":"Laravel開發環境建置"},{"categories":["Markdowm"],"contents":"Markdown 介紹  Markdown 是一種輕量級標記語言，它允許人們使用易讀易寫的純文字格式撰寫檔案。 Markdown 撰寫的檔案可以匯出 HTML 、Word、影象、PDF、Epub 等多種格式的檔案。 Markdown 撰寫的檔案後綴為 .md, .markdown。  Heading 1 Heading 2 Heading 3 Heading 4 Heading 5 Heading 6 Emphasis Emphasis, aka italics, with asterisks or underscores.\nStrong emphasis, aka bold, with asterisks or underscores.\nCombined emphasis with asterisks and underscores.\nStrikethrough uses two tildes. Scratch this.\nLink I\u0026rsquo;m an inline-style link\nI\u0026rsquo;m an inline-style link with title\nI\u0026rsquo;m a reference-style link\nI\u0026rsquo;m a relative reference to a repository file\nYou can use numbers for reference-style link definitions\nOr leave it empty and use the link text itself.\nURLs and URLs in angle brackets will automatically get turned into links. http://www.example.com or http://www.example.com and sometimes example.com (but not on Github, for example).\nSome text to show that the reference links can follow later.\nParagraph Lorem ipsum dolor sit amet consectetur adipisicing elit. Quam nihil enim maxime corporis cumque totam aliquid nam sint inventore optio modi neque laborum officiis necessitatibus, facilis placeat pariatur! Voluptatem, sed harum pariatur adipisci voluptates voluptatum cumque, porro sint minima similique magni perferendis fuga! Optio vel ipsum excepturi tempore reiciendis id quidem? Vel in, doloribus debitis nesciunt fugit sequi magnam accusantium modi neque quis, vitae velit, pariatur harum autem a! Velit impedit atque maiores animi possimus asperiores natus repellendus excepturi sint architecto eligendi non, omnis nihil. Facilis, doloremque illum. Fugit optio laborum minus debitis natus illo perspiciatis corporis voluptatum rerum laboriosam.\nList  List item List item List item List item List item  Unordered List  List item List item List item List item List item  Code and Syntax Highlighting Inline code has back-ticks around it.\nvar s = \u0026#34;JavaScript syntax highlighting\u0026#34;; alert(s); s = \u0026#34;Python syntax highlighting\u0026#34; print s No language indicated, so no syntax highlighting. But let's throw in a \u0026lt;b\u0026gt;tag\u0026lt;/b\u0026gt;. Blockquote  This is a blockquote example.\n Inline HTML You can also use raw HTML in your Markdown, and it\u0026rsquo;ll mostly work pretty well.\nTables Colons can be used to align columns.\n   Tables Are Cool     col 3 is right-aligned $1600   col 2 is centered $12   zebra stripes are neat $1    There must be at least 3 dashes separating each header cell. The outer pipes (|) are optional, and you don\u0026rsquo;t need to make the raw Markdown line up prettily. You can also use inline Markdown.\n   Markdown Less Pretty     Still renders nicely   1 2 3    Image Youtube video   參考資料 Markdown Cheatsheet 中文版\nMarkdown 教學\n","permalink":"https://tonytoolsn.github.io/blog/markdowm_language/","tags":["Photos","Game","HTML","Python","New"],"title":"Markdowm基本語法"},{"categories":["Markdowm"],"contents":"Typora介紹 Typora是一款由Abner Lee開發的輕量級Markdown編輯器，適用於OS X、Windows和Linux三種作業系統，是一款免費軟體。與其他Markdown編輯器不同的是，Typora沒有採用原始碼和預覽雙欄顯示的方式，而是採用所見即所得的編輯方式，實現了即時預覽的功能，但也可切換至原始碼編輯模式。\nTypora安裝: 下載點\n安裝流程 : 進到官方網站，Download下適用於您作業系統的版本。\nTypora常用設定:  樹狀結構顯示 主題(T)  Typora常用段落(P):  二級標題 Crtl + 2 四級標題 Crtl + 4 有序清單 Ctrl + Shift + [ 無序清單 Ctrl + Shift + ] 表格 Ctrl + T 引言 Ctrl + Shift + Q 程式碼區塊 Ctrl + Shift + K  Typora常用格式(O):  粗體 Ctrl + B 程式碼 Ctrl + Shift + ` 超連結 Ctrl + K  Typora常用檢視(V):  原始碼模式 Ctrl + /  參考資料 wiki\nTypora使用教程筆記\n","permalink":"https://tonytoolsn.github.io/blog/markdowm_typora/","tags":["Photos","Game","HTML","Python","New"],"title":"Markdowm好用編輯器-Typora"}]